#include "my_partial_flodding.hpp"

#include "my_logger.hpp"
namespace nfd
{
namespace fw
{

const Name my_partial_flodding::STRATEGY_NAME("ndn:/localhost/nfd/strategy/my_partial_flodding/%FD%01");
NFD_REGISTER_STRATEGY(my_partial_flodding);

my_partial_flodding::my_partial_flodding(Forwarder& forwarder, const Name& name)
    : Strategy(forwarder, name)
{
}

my_partial_flodding::~my_partial_flodding()
{
}

void my_partial_flodding::afterReceiveInterest(const Face& inFace,
        const Interest& interest,
        shared_ptr<fib::Entry> fibEntry,
        shared_ptr<pit::Entry> pitEntry)
{
    my_logger::get().log("partialflodding", "afterReceiveInterest", interest.getName().toUri());

    auto is_upstream = [](const Face & f) {
        if (f.getLocalUri().toString().find("eth0") != std::string::npos) { //inface is a upstream
            return true;
        } else { //inFace is a downstream
            return false;
        }
    };


    const fib::NextHopList& nexthops = fibEntry->getNextHops();

    for (fib::NextHopList::const_iterator it = nexthops.begin(); it != nexthops.end(); ++it) {
        shared_ptr<Face> outFace = it->getFace();
        if (is_upstream(inFace)) { //broadcast
            if (pitEntry->canForwardTo(*outFace)) {
                this->sendInterest(pitEntry, outFace);
            }
        } else { //forward to upstream
            if (pitEntry->canForwardTo(*outFace)) {
                if (is_upstream(*outFace) || outFace->isLocal()) {
                    this->sendInterest(pitEntry, outFace);
                }
            }
        }
    }

    if (!pitEntry->hasUnexpiredOutRecords()) {
        this->rejectPendingInterest(pitEntry);
    }
}

void my_partial_flodding::beforeSatisfyInterest(shared_ptr<pit::Entry> pitEntry,
                                       const Face& inFace, const Data& data)
{
    my_logger::get().log("partialflodding", "beforeSatisfyInterest", data.getName().toUri());
}

} // namespace fw
} // namespace nfd
