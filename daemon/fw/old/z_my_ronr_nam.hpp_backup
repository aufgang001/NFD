#ifndef NFD_DAEMON_FW_MY_RONR_NAM_HPP
#define NFD_DAEMON_FW_MY_RONR_NAM_HPP

#include "strategy.hpp"
#include "my_logger.hpp"

#include <ndn-cxx/face.hpp>

namespace nfd
{
namespace fw
{

class my_ronr_nam: public Strategy
{
public:
    my_ronr_nam(Forwarder& forwarder, const ndn::Name& name = STRATEGY_NAME);

    virtual
    ~my_ronr_nam();

    virtual void
    afterReceiveInterest(const Face& inFace,
                         const Interest& interest,
                         shared_ptr<fib::Entry> fibEntry,
                         shared_ptr<pit::Entry> pitEntry) DECL_OVERRIDE;

    virtual void
    beforeSatisfyInterest(shared_ptr<pit::Entry> pitEntry,
                                   const Face& inFace, const Data& data) DECL_OVERRIDE;


public:
    static const Name STRATEGY_NAME;

private:
    bool is_nam_msg(const Name& name) const;
    Name get_name_from_nam_msg(const Name& nam_msg) const;
    double get_probability_from_nam_msg(const Name& nam_msg) const;

    std::map<Name, std::set<int>> m_routing_db;
    void add_face_to_db(const Name& prefix, int faceid);
    std::set<int> route_to(const Name& nam_msg) const;
    
    bool m_is_gateway;
    my_logger m_my_logger;
};

} // namespace fw
} // namespace nfd

#endif // NFD_DAEMON_FW_MY_RONR_NAM_HPP
