#include "my_ronr_nam.hpp"


//#include <ndn-cxx/encoding/buffer-stream.hpp>
//#include <ndn-cxx/management/nfd-face-status.hpp>
#include <ndn-cxx/management/nfd-controller.hpp>
//#include <ndn-cxx/management/nfd-fib-entry.hpp>
//#include <ndn-cxx/management/nfd-rib-entry.hpp>

//#include <ndn-cxx/util/segment-fetcher.hpp>
//#include <ndn-cxx/encoding/nfd-constants.hpp>


#include "my_routing.hpp"
#include <mutex>
#include <thread>

#include <cstdlib>

namespace nfd
{
namespace fw
{

const Name my_ronr_nam::STRATEGY_NAME("ndn:/localhost/nfd/strategy/my_ronr_nam/%FD%01");
NFD_REGISTER_STRATEGY(my_ronr_nam);

my_ronr_nam::my_ronr_nam(Forwarder& forwarder, const ndn::Name& name)
    : Strategy(forwarder, name)
    , m_my_logger()
{
    std::srand(std::time(0));

    if (const char* env_p = std::getenv("HOST")) {
        m_is_gateway = std::string(env_p) == "h0";
        //std::cout << "is gateway: " << m_is_gateway << std::endl;
    } else {
        m_is_gateway = false;
        //std::cout << "not is gateway" << std::endl;
    }

    //std::cout << "DEBUG: start RONR Strategy" << std::endl;
}

my_ronr_nam::~my_ronr_nam()
{
    //std::cout << "DEBUG: stopped RONR Strategy" << std::endl;
}

void my_ronr_nam::afterReceiveInterest(const Face& inFace,
                                       const Interest& interest,
                                       shared_ptr<fib::Entry> fibEntry,
                                       shared_ptr<pit::Entry> pitEntry)
{
    //std::cout << "##-- DEBUG: RONR_NAM Strategy (afterReceiveInterest start)" << std::endl;

    //m_my_logger.log("ronrnam", "afterReceiveInterest", interest.getName().toUri());

    auto is_upstream = [](const Face & f) {
        if (f.getLocalUri().toString().find("eth0") == std::string::npos) { //inface is a upstream
            return false;
        } else { //inFace is a downstream
            return true;
        }
    };

    auto is_intern_face = [](const Face & f) {
        if (f.getLocalUri().toString().find("dev://") == std::string::npos) { //inface is a dev
            return true;
        } else { //inFace is a downstream
            return false;
        }
    };

    const fib::NextHopList& nexthops = fibEntry->getNextHops();

    if (is_nam_msg(interest.getName())) {
        //std::cout << "DEBUG: found nam_msg:" << interest.getName().toUri() << std::endl;
        add_face_to_db(interest.getName(), inFace.getId());

        for (fib::NextHopList::const_iterator it = nexthops.begin(); it != nexthops.end(); ++it) {
            shared_ptr<Face> outFace = it->getFace();
            if (is_upstream(*outFace)) {
                if (pitEntry->canForwardTo(*outFace)) {
                    //std::cout << " DEBUG: found upstream to forward nam_msg: " << outFace->getLocalUri().toString() << std::endl;
                    this->sendInterest(pitEntry, outFace);
                    break;
                    //r.set_route(ndn::nfd::RouteFlags::ROUTE_FLAG_CAPTURE, get_name_from_nam_msg(interest.getName()).toUri(), inFace.getId());
                }
            }
        }
    } else {
        //std::cout << "DEBUG: standart message:" << interest.getName().toUri() << std::endl;
        auto face_set = route_to(interest.getName());

        if (!face_set.empty()) { //fib entry
            //std::cout << " DEBUG: face_set not empty: " << inFace.getId() << " " << inFace.getLocalUri().toString() << std::endl;

            for (fib::NextHopList::const_iterator it = nexthops.begin(); it != nexthops.end(); ++it) {
                shared_ptr<Face> outFace = it->getFace();

                if (is_intern_face(*outFace)) {
                    if (pitEntry->canForwardTo(*outFace)) {
                        this->sendInterest(pitEntry, outFace);
                        //std::cout << " DEBUG: send Interest to outFace: " << outFace->getId() << " " << outFace->getLocalUri().toString() << std::endl;
                    }
                } else if (face_set.find(outFace->getId()) != face_set.end()) {
                    this->sendInterest(pitEntry, outFace, true);
                    //std::cout << " DEBUG: send Interest to outFace: " << outFace->getId() << " " << outFace->getLocalUri().toString() << std::endl;
                    m_my_logger.log("ronrnam", "afterSendUnicastInterest", interest.getName().toUri());
                    break;
                }

            }
        } else if (is_upstream(inFace)) { //broadcast
            //std::cout << " DEBUG: inFace is the upstream: " << inFace.getId() << " " << inFace.getLocalUri().toString() << std::endl;
            for (fib::NextHopList::const_iterator it = nexthops.begin(); it != nexthops.end(); ++it) {
                shared_ptr<Face> outFace = it->getFace();

                if (is_intern_face(*outFace)) {
                    if (pitEntry->canForwardTo(*outFace)) {
                        this->sendInterest(pitEntry, outFace);
                        //std::cout << " DEBUG: send Interest to outFace: " << outFace->getId() << " " << outFace->getLocalUri().toString() << std::endl;
                    }
                } else if (face_set.empty() && !is_upstream(*outFace)) {
                    this->sendInterest(pitEntry, outFace);
                    //std::cout << " DEBUG: send Interest to outFace: " << outFace->getId() << " " << outFace->getLocalUri().toString() << std::endl;
                    m_my_logger.log("ronrnam", "afterSendBroadcastInterest", interest.getName().toUri());
                }

            }
        } else { //forward to upstream
            //std::cout << " DEBUG: inFace is a downstream: " << inFace.getId() << " " << inFace.getLocalUri().toString() << std::endl;

            for (fib::NextHopList::const_iterator it = nexthops.begin(); it != nexthops.end(); ++it) {
                shared_ptr<Face> outFace = it->getFace();

                if (pitEntry->canForwardTo(*outFace)) {
                    if (is_intern_face(*outFace) ) {
                        this->sendInterest(pitEntry, outFace);
                        //std::cout << " DEBUG: send Interest to outFace: " << outFace->getId() << " " << outFace->getLocalUri().toString() << std::endl;
                        break;
                    } else if (is_upstream(*outFace)) {
                        this->sendInterest(pitEntry, outFace);
                        //std::cout << " DEBUG: send Interest to outFace: " << outFace->getId() << " " << outFace->getLocalUri().toString() << std::endl;
                        m_my_logger.log("ronrnam", "afterSendUnicastInterest", interest.getName().toUri());
                        break;


                    }
                }
            }
        }
    }

    if (!pitEntry->hasUnexpiredOutRecords()) {
        this->rejectPendingInterest(pitEntry);
    }

    //for (fib::NextHopList::const_iterator it = nexthops.begin(); it != nexthops.end(); ++it) {
    //shared_ptr<Face> outFace = it->getFace();
    ////interest broadcasten wenn das set leer ist (noch kein nam f√ºr das prefix empfangen wurde) oder die faceid im set enthalten ist
    ////std::cout << " DEBUG: Checking outFace: " << outFace->getId() << " " << outFace->getLocalUri().toString() << std::endl;
    //if (is_intern_face(*outFace) || face_set.empty() || face_set.find(outFace->getId()) != face_set.end()) {
    //std::cout << " DEBUG: Checking can Forward To outFace: " << outFace->getId() << " " << outFace->getLocalUri().toString() << std::endl;
    //if (pitEntry->canForwardTo(*outFace)) {
    //std::cout << " DEBUG: forwarding now" << std::endl;

    //this->sendInterest(pitEntry, outFace);

    //if (!is_intern_face(*outFace)) {
    //if (is_upstream(*outFace) || !face_set.empty()) {
    //m_my_logger.log("ronrnam", "afterSendUnicastInterest", interest.getName().toUri());
    //} else {
    //m_my_logger.log("ronrnam", "afterSendBroadcastInterest", interest.getName().toUri());
    //}
    //}

    //} else {
    //std::cout << " DEBUG: ignore face" << std::endl;
    //}
    //} else {
    //}
    //}


//std::cout << "DEBUG: RONR_NAM Strategy (afterReceiveInterest stop)" << std::endl;
}

void my_ronr_nam::beforeSatisfyInterest(shared_ptr<pit::Entry> pitEntry,
                                        const Face& inFace, const Data& data)
{
    //std::cout << "##-- DEBUG: RONR Strategy (beforeSatisfyInterest start)" << std::endl;

    //m_my_logger.log("ronrnam", "beforeSatisfyInterest", data.getName().toUri());



    //????? es koennen mehrere Interest des selben prefixes geflutet worden sein
    //entweder set_route liefert ein error oder die route wird aktuallisiert
    //if (pitEntry->getOutRecords().size() > 1) { //was this interest flooded
    //my_routing r;
    //r.set_route(ndn::nfd::RouteFlags::ROUTE_FLAG_CAPTURE, data.getName().getPrefix(-1).toUri(), inFace.getId());
    //}

    //std::cout << "DEBUG: RONR Strategy (beforeSatisfyInterest stop)" << std::endl;
}

bool my_ronr_nam::is_nam_msg(const Name& name) const
{
    // /nam_msg/ronrnam/www.google.de/0.951974390/
    //  ^^^^^^^
    return name.at(0) == name::Component("nam_msg");
}

Name my_ronr_nam::get_name_from_nam_msg(const Name& nam_msg) const
{
    // from nam msg: /nam_msg/ronrnam/www.google.de/0.951974390/
    // to name: /ronrnam/www.google.de
    return nam_msg.getPrefix(-1).getSubName(1);
}

double my_ronr_nam::get_probability_from_nam_msg(const Name& nam_msg) const
{
    // from nam msg: /nam_msg/ronrnam/www.google.de/0.951974390/
    // to propability: 0.951974390
    return std::stod(nam_msg.at(nam_msg.size() - 1).toUri());
}


void my_ronr_nam::add_face_to_db(const Name& nam_msg, int faceid)
{
    double x = get_probability_from_nam_msg(nam_msg);
    auto name = get_name_from_nam_msg(nam_msg);
    double rand_value = static_cast<double>(std::rand()) / RAND_MAX;

    //std::cout << "x: " << x << " name: " << name << " rand_value: " << rand_value << std::endl;

    if (m_is_gateway || rand_value <= x) {
        //std::cout << "save prefix!!"  << std::endl;
        auto it = m_routing_db.find(name);
        if (it == m_routing_db.end()) {
            //std::cout << " DEBUG: set new prefix:" << name.toUri() << " mit faceid:" << faceid << std::endl;
            m_routing_db.insert({name, {faceid}});
        } else {
            //std::cout << " DEBUG: add faceid to prefix:" << name.toUri() << " mit faceid:" << faceid << std::endl;
            it->second.insert(faceid);
        }
    } else {
        //std::cout << "dont save prefix!!"  << std::endl;
    }
}

std::set<int> my_ronr_nam::route_to(const Name& prefix) const
{
    for (auto & e : m_routing_db) {
        if (e.first.isPrefixOf(prefix)) {
            return e.second;
        }
    }
    return {};
}



} // namespace fw
} // namespace nfd
