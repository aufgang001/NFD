#include "my_ronr.hpp"



//#include <ndn-cxx/encoding/buffer-stream.hpp>
//#include <ndn-cxx/management/nfd-face-status.hpp>
#include <ndn-cxx/management/nfd-controller.hpp>
//#include <ndn-cxx/management/nfd-fib-entry.hpp>
//#include <ndn-cxx/management/nfd-rib-entry.hpp>

//#include <ndn-cxx/util/segment-fetcher.hpp>
//#include <ndn-cxx/encoding/nfd-constants.hpp>

#include "my_logger.hpp"

#include "my_routing.hpp"

namespace nfd
{
namespace fw
{

const Name my_ronr::STRATEGY_NAME("ndn:/localhost/nfd/strategy/my_ronr/%FD%01");
NFD_REGISTER_STRATEGY(my_ronr);

my_ronr::my_ronr(Forwarder& forwarder, const ndn::Name& name)
    : Strategy(forwarder, name)
{
    //std::cout << "DEBUG: start RONR Strategy" << std::endl;
}

my_ronr::~my_ronr()
{
    //std::cout << "DEBUG: stopped RONR Strategy" << std::endl;
}

void my_ronr::afterReceiveInterest(const Face& inFace,
                                   const Interest& interest,
                                   shared_ptr<fib::Entry> fibEntry,
                                   shared_ptr<pit::Entry> pitEntry)
{
    std::cout << "DEBUG: RONR Strategy (afterReceiveInterest start)" << std::endl;

    my_logger::get().log("ronr", "afterReceiveInterest", interest.getName().toUri());

    const fib::NextHopList& nexthops = fibEntry->getNextHops();

    for (fib::NextHopList::const_iterator it = nexthops.begin(); it != nexthops.end(); ++it) {
        shared_ptr<Face> outFace = it->getFace();
        if (pitEntry->canForwardTo(*outFace)) {
            this->sendInterest(pitEntry, outFace);
        }
    }

    if (!pitEntry->hasUnexpiredOutRecords()) {
        this->rejectPendingInterest(pitEntry);
    }

    std::cout << "DEBUG: RONR Strategy (afterReceiveInterest stop)" << std::endl;
}

void my_ronr::beforeSatisfyInterest(shared_ptr<pit::Entry> pitEntry,
                                    const Face& inFace, const Data& data)
{
    std::cout << "DEBUG: RONR Strategy (beforeSatisfyInterest start)" << std::endl;

    my_logger::get().log("ronr", "beforeSatisfyInterest", data.getName().toUri());

    //????? es koennen mehrere Interest des selben prefixes geflutet worden sein 
    //entweder set_route liefert ein error oder die route wird aktuallisiert
    if (pitEntry->getOutRecords().size() > 1) { //was this interest flooded
        my_routing r;
        r.set_route(ndn::nfd::RouteFlags::ROUTE_FLAG_CAPTURE, data.getName().getPrefix(-1).toUri(), inFace.getId());
    }

    std::cout << "DEBUG: RONR Strategy (beforeSatisfyInterest stop)" << std::endl;
}



} // namespace fw
} // namespace nfd
